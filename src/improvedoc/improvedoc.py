#!/usr/bin/env python3
"""
ImproveDoc - Outil d'am√©lioration de contenu Markdown avec Wikipedia et CrewAI

Cet outil prend en entr√©e un fichier Markdown et produit une version am√©lior√©e 
en enrichissant le contenu avec des informations provenant de Wikipedia.
"""

import sys
import os
import argparse
import logging
from pathlib import Path
import warnings

# Ajouter le r√©pertoire courant au chemin pour permettre les imports
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.insert(0, current_dir)

# D√©sactiver les warnings
warnings.filterwarnings("ignore", category=Warning)

try:
    from lib.enhancer import ContentEnhancer
    
    # V√©rifier que les modules n√©cessaires sont install√©s
    import crewai
    import wikipedia
except ImportError as e:
    print(f"‚ö†Ô∏è Erreur d'importation: {e}")
    print("‚ö†Ô∏è Certaines d√©pendances requises ne sont pas install√©es.")
    print("Installez-les avec : pip install -r requirements.txt")
    print("Assurez-vous d'activer l'environnement virtuel : source venv/bin/activate")
    sys.exit(1)

def main():
    """
    Fonction principale pour l'ex√©cution de l'outil en ligne de commande.
    """
    parser = argparse.ArgumentParser(
        description="ImproveDoc - Am√©liore un document Markdown avec des informations de Wikipedia"
    )
    parser.add_argument(
        "input_file",
        help="Chemin vers le fichier Markdown √† am√©liorer"
    )
    parser.add_argument(
        "-o", "--output",
        help="Chemin vers le fichier de sortie (par d√©faut: nom_du_fichier_improved.md)"
    )
    parser.add_argument(
        "--api-key",
        help="Cl√© API pour le mod√®le LLM (si non d√©fini dans .env)"
    )
    parser.add_argument(
        "--debug",
        action="store_true",
        help="Active le mode debug pour plus d'informations"
    )
    parser.add_argument(
        "--model",
        help="Nom du mod√®le LLM √† utiliser (par d√©faut: d√©fini dans .env ou gpt-3.5-turbo)"
    )
    
    args = parser.parse_args()
    
    # V√©rifier que le fichier d'entr√©e existe
    input_path = Path(args.input_file)
    if not input_path.exists():
        print(f"‚ö†Ô∏è Erreur: Le fichier {input_path} n'existe pas.")
        sys.exit(1)
    
    # D√©terminer le chemin du fichier de sortie
    if args.output:
        output_path = Path(args.output)
    else:
        output_path = input_path.parent / f"{input_path.stem}_improved{input_path.suffix}"
    
    # Lire le contenu du fichier d'entr√©e
    try:
        with open(input_path, 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors de la lecture du fichier: {e}")
        sys.exit(1)
    
    # Configurer le mode debug si demand√©
    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
        print("Mode debug activ√©")
    
    # Am√©liorer le contenu
    print(f"üîç Analyse et am√©lioration du contenu en cours...")
    try:
        # Cr√©er le service d'am√©lioration de contenu
        enhancer = ContentEnhancer(api_key=args.api_key, model=args.model)
        
        # Am√©liorer le contenu
        improved_content = enhancer.enhance_content(content)
        
        # V√©rifier si le contenu a √©t√© r√©ellement am√©lior√©
        if improved_content == content:
            print("‚ö†Ô∏è Le contenu n'a pas pu √™tre am√©lior√© en raison d'erreurs avec l'API LLM.")
            print("Essayez avec une cl√© API valide (param√®tre --api-key ou variable d'environnement CREW_API_KEY).")
        
        # √âcrire le contenu dans le fichier de sortie
        try:
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(improved_content)
            print(f"‚úÖ Contenu enregistr√© dans {output_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de l'√©criture du fichier: {e}")
    except ValueError as e:
        print(f"‚ö†Ô∏è Erreur de configuration: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors de l'am√©lioration du contenu: {e}")
        print("Le fichier d'entr√©e n'a pas √©t√© modifi√©.")

if __name__ == "__main__":
    main()