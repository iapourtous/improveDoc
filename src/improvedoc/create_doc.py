#!/usr/bin/env python3
"""
CreateDoc - Outil de cr√©ation de documents Markdown structur√©s

Cet outil permet de cr√©er un document Markdown structur√© √† partir d'un titre,
d'un sujet et d'instructions sp√©cifiques, puis de l'am√©liorer automatiquement
avec ImproveDoc.
"""

import sys
import os
import argparse
from pathlib import Path
import logging
import warnings
from dotenv import load_dotenv

# Charger les variables d'environnement depuis .env
load_dotenv()

# Ajouter le r√©pertoire courant au chemin pour permettre les imports
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.insert(0, current_dir)

# D√©sactiver les warnings
warnings.filterwarnings("ignore", category=Warning)

try:
    # Importer les modules n√©cessaires
    from lib.enhancer import ContentEnhancer
    from lib.creator import ContentCreator
    from lib.agents import AgentFactory
    from crewai import LLM
    
    # V√©rifier que les modules n√©cessaires sont install√©s
    import crewai
    import wikipedia
except ImportError as e:
    print(f"‚ö†Ô∏è Erreur d'importation: {e}")
    print("‚ö†Ô∏è Certaines d√©pendances requises ne sont pas install√©es.")
    print("Installez-les avec : pip install -r requirements.txt")
    print("Assurez-vous d'activer l'environnement virtuel : source venv/bin/activate")
    sys.exit(1)

class DocumentCreator:
    """
    Classe responsable de la cr√©ation et l'am√©lioration de documents Markdown structur√©s
    bas√©e sur les principes SOLID.
    """
    
    def __init__(self, api_key=None, model=None):
        """
        Initialise le cr√©ateur de documents.
        
        Args:
            api_key: Cl√© API pour le mod√®le LLM (optionnel)
            model: Nom du mod√®le LLM √† utiliser (optionnel)
        """
        self.api_key = api_key
        self.model = model
        
        # Ne pas cr√©er de LLM ici, les services en cr√©eront eux-m√™mes
        
        # Ne pas initialiser de factory d'agents ici
        
        # Initialiser les services directement avec les cl√©s API
        # Exactement comme dans improvedoc.py
        try:
            self.content_enhancer = ContentEnhancer(api_key=api_key, model=model)
            
            # Cr√©er le service de cr√©ation de contenu avec une factory d'agents
            # R√©utiliser la factory du ContentEnhancer pour √™tre coh√©rent
            self.content_creator = ContentCreator(
                agent_factory=self.content_enhancer.agent_factory,
                api_key=api_key,
                model=model
            )
        except ValueError as e:
            print(f"‚ö†Ô∏è Erreur de configuration: {e}")
            raise
    
    def create_document(self, title, subject="", instructions=""):
        """
        Cr√©e un document Markdown structur√© bas√© sur les entr√©es utilisateur
        en utilisant les agents sp√©cialis√©s pour g√©n√©rer un contenu initial de qualit√©.
        
        Args:
            title: Titre du document
            subject: Sujet principal du document (facultatif)
            instructions: Instructions sp√©cifiques pour le contenu (facultatif)
            
        Returns:
            str: Contenu Markdown g√©n√©r√©
        """
        print("üìù G√©n√©ration du contenu initial avec des agents sp√©cialis√©s...")
        return self.content_creator.create_content(title, subject, instructions)
    
    def improve_document(self, content):
        """
        Am√©liore le contenu du document en utilisant ContentEnhancer.
        
        Args:
            content: Contenu Markdown √† am√©liorer
            
        Returns:
            str: Contenu Markdown am√©lior√©
        """
        try:
            print("üîç Am√©lioration du contenu avec des informations de Wikipedia...")
            improved_content = self.content_enhancer.enhance_content(content)
            return improved_content
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de l'am√©lioration du contenu: {e}")
            print("Le contenu original sera utilis√©.")
            return content
    
    def save_document(self, content, output_path):
        """
        Enregistre le contenu dans un fichier.
        
        Args:
            content: Contenu Markdown √† enregistrer
            output_path: Chemin du fichier de sortie
            
        Returns:
            bool: True si l'enregistrement a r√©ussi, False sinon
        """
        try:
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(content)
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de l'√©criture du fichier: {e}")
            return False
    
    # M√©thode _extract_sections_from_instructions d√©plac√©e vers lib/creator.py

def main():
    """
    Fonction principale pour l'ex√©cution de l'outil en ligne de commande avec interface interactive.
    """
    parser = argparse.ArgumentParser(
        description="CreateDoc - Cr√©er et am√©liorer un document Markdown structur√©"
    )
    parser.add_argument(
        "-o", "--output",
        help="Chemin vers le fichier de sortie (par d√©faut: titre_document.md)"
    )
    parser.add_argument(
        "--api-key",
        help="Cl√© API pour le mod√®le LLM (si non d√©fini dans .env)"
    )
    parser.add_argument(
        "--debug",
        action="store_true",
        help="Active le mode debug pour plus d'informations"
    )
    parser.add_argument(
        "--model",
        help="Nom du mod√®le LLM √† utiliser (par d√©faut: d√©fini dans .env ou gpt-3.5-turbo)"
    )
    parser.add_argument(
        "--no-improve",
        action="store_true",
        help="D√©sactive l'am√©lioration automatique du document"
    )
    
    args = parser.parse_args()
    
    # Configurer le mode debug si demand√©
    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
        print("Mode debug activ√©")
    
    # Interface interactive pour recueillir les entr√©es utilisateur
    print("üìù Bienvenue dans CreateDoc üìù")
    print("-------------------------------")
    
    # Demander le titre du document - √©l√©ment principal qui d√©termine le contenu
    title = input("Entrez le titre du document : ")
    while not title.strip():
        title = input("Le titre ne peut pas √™tre vide. Veuillez entrer un titre : ")
    
    # Demander le sujet principal (facultatif) - orientation th√©matique
    print("\nEntrez le sujet principal du document (facultatif).")
    print("Le sujet permet d'orienter le contenu, par exemple 'Intelligence Artificielle'")
    print("pour un document sur 'Google' axera le contenu sur les contributions de Google en IA.")
    subject = input("Sujet (appuyez sur Entr√©e pour ignorer) : ")
    
    # Demander les instructions
    print("\nEntrez les instructions sp√©cifiques pour le contenu (facultatif).")
    print("Exemples:")
    print("- Niveau de lecture: d√©butant, interm√©diaire, expert")
    print("- Mots-cl√©s comme 'histoire', 'applications', 'd√©fis', qui deviendront des sections")
    print("- Cadre temporel ou g√©ographique")
    instructions = input("Instructions (appuyez sur Entr√©e pour ignorer) : ")
    
    # D√©terminer le chemin du fichier de sortie
    if args.output:
        output_path = Path(args.output)
    else:
        # Cr√©er un nom de fichier √† partir du titre (en rempla√ßant les espaces par des underscores)
        safe_title = title.replace(' ', '_').lower()
        output_path = Path(f"{safe_title}.md")
    
    # Cr√©er le service de cr√©ation de documents
    document_creator = DocumentCreator(api_key=args.api_key, model=args.model)
    
    # G√©n√©rer le contenu du document
    print(f"\nüìù Cr√©ation du document '{title}' en cours...")
    content = document_creator.create_document(
        title=title,
        subject=subject,
        instructions=instructions
    )
    
    # Enregistrer le document de base
    base_output_path = output_path
    if document_creator.save_document(content, base_output_path):
        print(f"‚úÖ Document de base enregistr√© dans {base_output_path}")
    
    # Demander √† l'utilisateur s'il souhaite am√©liorer le document
    if not args.no_improve:
        improve = input("\nSouhaitez-vous am√©liorer le document avec des informations de Wikipedia ? (o/n) : ").lower()
        if improve == 'o' or improve == 'oui':
            print(f"üîç Am√©lioration du document en cours...")
            improved_content = document_creator.improve_document(content)
            
            # D√©terminer le chemin du fichier am√©lior√©
            improved_output_path = base_output_path.parent / f"{base_output_path.stem}_improved{base_output_path.suffix}"
            
            # Enregistrer le document am√©lior√©
            if document_creator.save_document(improved_content, improved_output_path):
                print(f"‚úÖ Document am√©lior√© enregistr√© dans {improved_output_path}")
        else:
            print("‚û°Ô∏è Am√©lioration ignor√©e sur demande de l'utilisateur.")
    
    print("\n‚úÖ Processus termin√© avec succ√®s!")

if __name__ == "__main__":
    main()